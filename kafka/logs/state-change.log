[2022-06-02 21:41:54,160] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-04 21:24:34,583] INFO [Controller id=0 epoch=4] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-04 21:24:34,659] INFO [Controller id=0 epoch=4] Sending LeaderAndIsr request to broker 0 with 103 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-04 21:24:34,664] INFO [Controller id=0 epoch=4] Sending UpdateMetadata request to brokers Set(0) for 103 partitions (state.change.logger)
[2022-06-04 21:24:34,722] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-04 21:24:34,864] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 4 as part of the become-leader transition for 103 partitions (state.change.logger)
[2022-06-04 21:24:34,889] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,900] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,904] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,910] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,915] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,919] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,926] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,931] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,935] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,941] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,947] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,953] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,958] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,963] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,968] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,972] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 102 with high watermark 102 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,972] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,977] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,982] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,986] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,991] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,995] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:34,999] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,003] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,008] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,013] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,017] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,021] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,025] INFO [Broker id=0] Leader reservation-system-topic-0 starts at leader epoch 0 from offset 50 with high watermark 50 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,026] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,030] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,034] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,038] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,044] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,048] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 12 with high watermark 12 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,048] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,053] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,059] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,064] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,069] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,075] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,080] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,084] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,089] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,095] INFO [Broker id=0] Leader __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,099] INFO [Broker id=0] Leader __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,103] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,109] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 100 with high watermark 100 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,110] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,115] INFO [Broker id=0] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,120] INFO [Broker id=0] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,125] INFO [Broker id=0] Leader __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,130] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,135] INFO [Broker id=0] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,140] INFO [Broker id=0] Leader __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,146] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,150] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,155] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,160] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,165] INFO [Broker id=0] Leader __transaction_state-33 starts at leader epoch 0 from offset 48 with high watermark 48 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,165] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 26 with high watermark 26 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,166] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,171] INFO [Broker id=0] Leader __transaction_state-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,175] INFO [Broker id=0] Leader __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,181] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,185] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,191] INFO [Broker id=0] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,196] INFO [Broker id=0] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,201] INFO [Broker id=0] Leader __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,208] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,218] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,236] INFO [Broker id=0] Leader __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,244] INFO [Broker id=0] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,250] INFO [Broker id=0] Leader __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,259] INFO [Broker id=0] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,265] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,270] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,277] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,284] INFO [Broker id=0] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,292] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,297] INFO [Broker id=0] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,302] INFO [Broker id=0] Leader __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,310] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,315] INFO [Broker id=0] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,327] INFO [Broker id=0] Leader __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,334] INFO [Broker id=0] Leader __transaction_state-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,343] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,353] INFO [Broker id=0] Leader __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,358] INFO [Broker id=0] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,364] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,370] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,376] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,383] INFO [Broker id=0] Leader __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,388] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,394] INFO [Broker id=0] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,402] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,406] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,415] INFO [Broker id=0] Leader __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,420] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,427] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,431] INFO [Broker id=0] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,436] INFO [Broker id=0] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,444] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-04 21:24:35,653] INFO [Broker id=0] Finished LeaderAndIsr request in 932ms correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-04 21:24:35,701] INFO [Broker id=0] Add 103 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 4 with correlation id 2 (state.change.logger)
[2022-06-05 13:18:21,052] INFO [Controller id=0 epoch=5] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-05 13:18:21,092] INFO [Controller id=0 epoch=5] Sending LeaderAndIsr request to broker 0 with 103 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-05 13:18:21,092] INFO [Controller id=0 epoch=5] Sending UpdateMetadata request to brokers Set(0) for 103 partitions (state.change.logger)
[2022-06-05 13:18:21,092] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-05 13:18:21,100] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-28 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,100] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-6 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,100] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-39 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,100] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-17 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,100] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-22 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,100] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-44 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,100] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-33 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,100] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-25 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,100] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-14 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,100] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-3 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-8 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-19 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-30 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-41 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-11 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-0 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-49 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-38 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-5 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-27 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-16 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-43 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-2 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-35 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-24 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-46 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-13 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-29 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-40 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-32 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-21 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-10 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-15 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-26 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-37 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-48 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-7 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-18 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-34 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-23 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-45 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-12 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-1 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-4 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-31 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-20 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-9 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-42 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-36 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __transaction_state-47 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition invoice-event-topic-0 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition reservation-system-topic-0 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition reservation-event-topic-0 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-49 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-38 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-16 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-27 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-8 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-19 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-13 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-2 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-24 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-35 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-46 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-5 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-43 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-21 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-32 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-10 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-37 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-48 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-18 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-29 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-40 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-7 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-45 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-23 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-34 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-26 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-4 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-15 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-42 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-31 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-9 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-20 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-1 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-12 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-28 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-17 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-6 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-39 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-44 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-36 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-47 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-25 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-14 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-3 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-30 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-41 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-11 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-33 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-22 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,108] INFO [Broker id=0] Ignoring LeaderAndIsr request from controller 0 with correlation id 1 epoch 5 for partition __consumer_offsets-0 since its associated leader epoch 0 matches the current leader epoch (state.change.logger)
[2022-06-05 13:18:21,116] INFO [Broker id=0] Finished LeaderAndIsr request in 16ms correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-05 13:18:21,116] INFO [Broker id=0] Add 103 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 5 with correlation id 2 (state.change.logger)
[2022-06-05 13:22:08,021] INFO [Controller id=0 epoch=5] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-05 20:09:37,454] INFO [Controller id=0 epoch=6] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-05 20:09:37,538] INFO [Controller id=0 epoch=6] Sending LeaderAndIsr request to broker 0 with 103 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-05 20:09:37,559] INFO [Controller id=0 epoch=6] Sending UpdateMetadata request to brokers Set(0) for 103 partitions (state.change.logger)
[2022-06-05 20:09:37,613] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-05 20:09:37,707] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 6 as part of the become-leader transition for 103 partitions (state.change.logger)
[2022-06-05 20:09:37,737] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,745] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,749] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,755] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,762] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,767] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,774] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,779] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,784] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,792] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,797] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,804] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,810] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,815] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,820] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,825] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 109 with high watermark 109 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,826] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,836] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,841] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,847] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,852] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,857] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,861] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,867] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,875] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,880] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,884] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,891] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,895] INFO [Broker id=0] Leader reservation-system-topic-0 starts at leader epoch 0 from offset 50 with high watermark 50 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,895] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,907] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,912] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,921] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,926] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,936] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 16 with high watermark 16 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,936] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,942] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,945] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,949] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,953] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,959] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,965] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,974] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,978] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,982] INFO [Broker id=0] Leader __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:37,992] INFO [Broker id=0] Leader __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,000] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,006] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 111 with high watermark 111 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,007] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,011] INFO [Broker id=0] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,015] INFO [Broker id=0] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,019] INFO [Broker id=0] Leader __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,030] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,034] INFO [Broker id=0] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,040] INFO [Broker id=0] Leader __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,044] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,050] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,060] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,064] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,068] INFO [Broker id=0] Leader __transaction_state-33 starts at leader epoch 0 from offset 52 with high watermark 52 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,069] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 28 with high watermark 28 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,069] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,074] INFO [Broker id=0] Leader __transaction_state-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,077] INFO [Broker id=0] Leader __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,083] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,089] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,092] INFO [Broker id=0] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,096] INFO [Broker id=0] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,100] INFO [Broker id=0] Leader __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,109] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,113] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,122] INFO [Broker id=0] Leader __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,126] INFO [Broker id=0] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,130] INFO [Broker id=0] Leader __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,134] INFO [Broker id=0] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,140] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,146] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,151] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,155] INFO [Broker id=0] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,160] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,172] INFO [Broker id=0] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,177] INFO [Broker id=0] Leader __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,181] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,186] INFO [Broker id=0] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,192] INFO [Broker id=0] Leader __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,199] INFO [Broker id=0] Leader __transaction_state-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,207] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,216] INFO [Broker id=0] Leader __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,221] INFO [Broker id=0] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,230] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,236] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,241] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,247] INFO [Broker id=0] Leader __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,252] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,258] INFO [Broker id=0] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,262] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,266] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,272] INFO [Broker id=0] Leader __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,279] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,288] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,295] INFO [Broker id=0] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,299] INFO [Broker id=0] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,304] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-05 20:09:38,464] INFO [Broker id=0] Finished LeaderAndIsr request in 852ms correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-05 20:09:38,493] INFO [Broker id=0] Add 103 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 6 with correlation id 2 (state.change.logger)
[2022-06-05 23:56:10,609] INFO [Controller id=0 epoch=6] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-07 16:43:37,678] INFO [Controller id=0 epoch=7] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-07 16:43:37,744] INFO [Controller id=0 epoch=7] Sending LeaderAndIsr request to broker 0 with 103 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-07 16:43:37,748] INFO [Controller id=0 epoch=7] Sending UpdateMetadata request to brokers Set(0) for 103 partitions (state.change.logger)
[2022-06-07 16:43:37,790] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-07 16:43:37,890] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 7 as part of the become-leader transition for 103 partitions (state.change.logger)
[2022-06-07 16:43:37,915] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,924] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,928] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,933] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,939] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,943] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,947] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,952] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,957] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,962] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,967] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,972] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,977] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,983] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,989] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,993] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 113 with high watermark 113 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:37,994] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,000] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,004] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,010] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,015] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,019] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,025] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,034] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,038] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,043] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,048] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,052] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,057] INFO [Broker id=0] Leader reservation-system-topic-0 starts at leader epoch 0 from offset 50 with high watermark 50 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,057] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,062] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,066] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,069] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,074] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,079] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 18 with high watermark 18 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,079] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,084] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,089] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,092] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,097] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,101] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,105] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,109] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,114] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,118] INFO [Broker id=0] Leader __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,122] INFO [Broker id=0] Leader __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,126] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,130] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 122 with high watermark 122 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,131] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,135] INFO [Broker id=0] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,140] INFO [Broker id=0] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,144] INFO [Broker id=0] Leader __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,148] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,153] INFO [Broker id=0] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,157] INFO [Broker id=0] Leader __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,161] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,166] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,171] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,175] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,179] INFO [Broker id=0] Leader __transaction_state-33 starts at leader epoch 0 from offset 52 with high watermark 52 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,179] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 28 with high watermark 28 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,180] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,185] INFO [Broker id=0] Leader __transaction_state-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,189] INFO [Broker id=0] Leader __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,194] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,199] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,203] INFO [Broker id=0] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,207] INFO [Broker id=0] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,212] INFO [Broker id=0] Leader __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,216] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,220] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,224] INFO [Broker id=0] Leader __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,228] INFO [Broker id=0] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,233] INFO [Broker id=0] Leader __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,236] INFO [Broker id=0] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,240] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,244] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,252] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,256] INFO [Broker id=0] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,260] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,265] INFO [Broker id=0] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,269] INFO [Broker id=0] Leader __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,273] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,277] INFO [Broker id=0] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,282] INFO [Broker id=0] Leader __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,285] INFO [Broker id=0] Leader __transaction_state-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,290] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,294] INFO [Broker id=0] Leader __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,298] INFO [Broker id=0] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,302] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,306] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,310] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,314] INFO [Broker id=0] Leader __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,319] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,323] INFO [Broker id=0] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,327] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,331] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,335] INFO [Broker id=0] Leader __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,339] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,346] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,351] INFO [Broker id=0] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,355] INFO [Broker id=0] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,359] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-07 16:43:38,443] INFO [Broker id=0] Finished LeaderAndIsr request in 654ms correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-07 16:43:38,463] INFO [Broker id=0] Add 103 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 7 with correlation id 2 (state.change.logger)
[2022-06-07 16:49:36,872] INFO [Controller id=0 epoch=7] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:45:06,399] INFO [Controller id=0 epoch=8] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-09 11:45:06,479] INFO [Controller id=0 epoch=8] Sending LeaderAndIsr request to broker 0 with 103 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 11:45:06,485] INFO [Controller id=0 epoch=8] Sending UpdateMetadata request to brokers Set(0) for 103 partitions (state.change.logger)
[2022-06-09 11:45:06,546] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-09 11:45:06,659] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 8 as part of the become-leader transition for 103 partitions (state.change.logger)
[2022-06-09 11:45:06,729] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-0 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,731] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-48 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,732] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-29 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,732] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-25 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,733] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-44 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,733] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-6 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,733] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-10 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,734] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-45 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,734] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-3 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,735] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-41 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,735] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-22 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,736] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-26 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,736] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-7 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,737] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-42 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,737] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-0 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,737] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-38 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,737] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-4 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,738] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-23 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,738] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-19 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,738] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-35 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,738] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-16 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,738] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-1 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,739] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-20 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,739] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-39 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,739] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-17 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,739] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-36 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,739] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-13 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,739] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-32 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,740] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition reservation-system-topic-0 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,740] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-48 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,740] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-14 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,740] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-29 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,740] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-10 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,741] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-33 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,741] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition reservation-event-topic-0 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,741] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-7 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,741] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-45 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,741] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-26 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,741] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-49 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,742] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-11 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,742] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-30 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,742] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-23 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,742] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-46 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,742] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-27 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,742] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-42 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,742] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-4 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,743] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-8 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,743] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-24 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,743] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-43 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,743] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-1 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,743] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-39 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,743] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-20 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,744] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-5 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,744] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-17 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,744] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-36 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,744] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-21 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,745] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-40 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,745] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-2 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,745] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-37 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,745] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-33 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,746] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition invoice-event-topic-0 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,746] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-18 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,746] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-14 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,746] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-30 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,747] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-34 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,747] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-15 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,747] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-11 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,747] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-49 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,747] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-46 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,747] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-12 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,748] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-31 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,748] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-18 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,748] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-27 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,748] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-8 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,748] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-37 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,748] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-9 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,748] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-47 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,749] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-19 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,749] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-5 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,749] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-28 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,749] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-15 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,749] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-34 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,749] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-38 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,749] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-43 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,749] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-24 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,750] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-2 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,750] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-35 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,750] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-40 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,750] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-31 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,750] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-6 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,750] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-44 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,750] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-25 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,750] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-12 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,751] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-16 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,751] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-21 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,751] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-22 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,751] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-41 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,751] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-28 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,752] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-32 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,752] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-3 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,752] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-9 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,752] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __transaction_state-47 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,752] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 1 received from controller 0 epoch 8 for partition __consumer_offsets-13 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 11:45:06,773] ERROR [Controller id=0] Received error UNKNOWN_SERVER_ERROR in LeaderAndIsr response LeaderAndIsrResponseData(errorCode=-1, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=d7YLMwT2Qg2WeVBfLVQToQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=-1)]), LeaderAndIsrTopicError(topicId=4F2J_jqJTOq-7KPVpLefBg, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1)]), LeaderAndIsrTopicError(topicId=e9i2wNS-SyO6N5Pywctgmg, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1)]), LeaderAndIsrTopicError(topicId=pkMDh58cTrSP1Q2OH9G08Q, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1)]), LeaderAndIsrTopicError(topicId=j2YbzOVrSH--h8P-S70GMw, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1)])]) from broker 0 (state.change.logger)
[2022-06-09 11:45:06,781] INFO [Broker id=0] Add 103 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 8 with correlation id 2 (state.change.logger)
[2022-06-09 11:45:14,213] INFO [Controller id=0 epoch=8] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:46:22,134] INFO [Controller id=0 epoch=9] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-09 11:46:22,222] INFO [Controller id=0 epoch=9] Sending LeaderAndIsr request to broker 0 with 103 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 11:46:22,229] INFO [Controller id=0 epoch=9] Sending UpdateMetadata request to brokers Set(0) for 103 partitions (state.change.logger)
[2022-06-09 11:46:22,272] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-09 11:46:22,402] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 9 as part of the become-leader transition for 103 partitions (state.change.logger)
[2022-06-09 11:46:22,425] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,465] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,477] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,490] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,503] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,520] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,538] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,555] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,571] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,590] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,608] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,630] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,648] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,664] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,680] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,696] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,711] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,727] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,743] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,756] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,769] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,784] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,800] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,818] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,834] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,851] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,867] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,884] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,901] INFO [Broker id=0] Leader reservation-system-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,918] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,934] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,950] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,966] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,982] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:22,998] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,014] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,029] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,047] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,060] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,076] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,091] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,106] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,120] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,134] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,147] INFO [Broker id=0] Leader __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,162] INFO [Broker id=0] Leader __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,175] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,187] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,201] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,217] INFO [Broker id=0] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,232] INFO [Broker id=0] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,248] INFO [Broker id=0] Leader __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,263] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,277] INFO [Broker id=0] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,292] INFO [Broker id=0] Leader __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,307] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,319] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,331] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,345] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,360] INFO [Broker id=0] Leader __transaction_state-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,373] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,388] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,401] INFO [Broker id=0] Leader __transaction_state-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,415] INFO [Broker id=0] Leader __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,431] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,443] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,454] INFO [Broker id=0] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,469] INFO [Broker id=0] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,483] INFO [Broker id=0] Leader __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,498] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,513] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,529] INFO [Broker id=0] Leader __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,545] INFO [Broker id=0] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,563] INFO [Broker id=0] Leader __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,581] INFO [Broker id=0] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,596] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,612] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,626] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,641] INFO [Broker id=0] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,653] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,667] INFO [Broker id=0] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,679] INFO [Broker id=0] Leader __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,691] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,705] INFO [Broker id=0] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,721] INFO [Broker id=0] Leader __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,735] INFO [Broker id=0] Leader __transaction_state-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,748] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,762] INFO [Broker id=0] Leader __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,779] INFO [Broker id=0] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,794] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,811] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,824] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,840] INFO [Broker id=0] Leader __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,856] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,871] INFO [Broker id=0] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,901] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,915] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,931] INFO [Broker id=0] Leader __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,949] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,965] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:23,980] INFO [Broker id=0] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:24,001] INFO [Broker id=0] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:24,017] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:46:24,128] INFO [Broker id=0] Finished LeaderAndIsr request in 1860ms correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-09 11:46:24,147] INFO [Broker id=0] Add 103 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 9 with correlation id 2 (state.change.logger)
[2022-06-09 11:46:38,316] INFO [Controller id=0 epoch=9] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:47:15,769] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-09 11:48:12,896] INFO [Controller id=0 epoch=1] Changed partition invoice-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,897] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:48:12,904] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:48:12,952] INFO [Controller id=0 epoch=1] Changed partition invoice-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:12,957] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 11:48:12,961] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 1 partitions (state.change.logger)
[2022-06-09 11:48:12,964] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:48:12,972] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 11:48:12,976] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,977] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,977] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,977] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,977] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,977] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,977] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,977] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,977] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,977] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,977] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,977] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,978] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,979] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:12,980] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:48:12,982] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:48:13,050] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-06-09 11:48:13,163] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,163] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,163] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,163] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,164] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,164] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,164] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,164] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,164] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,164] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,165] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,166] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,167] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,167] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,167] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,167] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,167] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,167] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,167] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,167] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:13,168] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 11:48:13,168] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-09 11:48:13,170] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:48:13,360] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,412] INFO [Broker id=0] Finished LeaderAndIsr request in 440ms correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 11:48:13,429] INFO [Broker id=0] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 2 (state.change.logger)
[2022-06-09 11:48:13,434] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 11:48:13,548] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 3 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-09 11:48:13,566] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,585] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,614] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,659] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,682] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,713] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,748] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,767] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,795] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,818] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,839] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,870] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,898] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:13,931] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,021] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,049] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,069] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,096] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,116] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,138] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,180] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,322] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,345] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,368] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,395] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,417] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,447] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,469] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,491] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,524] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,548] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,569] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,588] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,612] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,634] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,664] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,684] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,704] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,723] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,745] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,771] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,794] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,809] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,828] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,850] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,879] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,900] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,919] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,933] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:14,958] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:15,014] INFO [Broker id=0] Finished LeaderAndIsr request in 1580ms correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 11:48:15,018] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 4 (state.change.logger)
[2022-06-09 11:48:32,703] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 11:48:32,703] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:48:32,704] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:48:32,719] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 11:48:32,719] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 11:48:32,720] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 1 partitions (state.change.logger)
[2022-06-09 11:48:32,720] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 11:48:32,721] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 5 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 11:48:32,724] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 5 from controller 0 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-06-09 11:48:32,758] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 11:48:32,768] INFO [Broker id=0] Finished LeaderAndIsr request in 48ms correlationId 5 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 11:48:32,771] INFO [Broker id=0] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 6 (state.change.logger)
[2022-06-09 12:32:22,541] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,544] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,544] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,544] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,544] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,544] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,544] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,544] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,545] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:32:22,546] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:32:22,549] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,707] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,708] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,709] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,709] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,709] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,709] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,709] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,709] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:32:22,709] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:32:22,711] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-09 12:32:22,713] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:32:22,772] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 7 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 12:32:22,839] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 7 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-09 12:32:22,868] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:22,886] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:22,904] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:22,924] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:22,946] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:22,966] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:22,989] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,008] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,029] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,052] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,073] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,100] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,121] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,147] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,170] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,199] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,216] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,237] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,254] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,272] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:32:23,309] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-25 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,322] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-6 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,322] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-44 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,324] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-41 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,325] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-3 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,325] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-22 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,325] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-38 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,326] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-0 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,326] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-19 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,326] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-35 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,328] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-16 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,328] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-13 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,329] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-32 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,330] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-48 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,330] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-29 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,331] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-10 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,331] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-7 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,332] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-26 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,332] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-45 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,332] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-23 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,333] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-42 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,333] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-4 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,333] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-39 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,333] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-1 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,334] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-20 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,334] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-36 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,334] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-17 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,335] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-33 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,335] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-14 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,336] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-30 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,336] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-49 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,337] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-11 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,337] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-46 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,338] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-18 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,338] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-27 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,338] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-8 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,338] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-37 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,339] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-5 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,340] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-15 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,341] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-34 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,341] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-43 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,341] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-24 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,341] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-2 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,342] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-40 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,342] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-31 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,342] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-21 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,343] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-12 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,343] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-28 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,343] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-9 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,344] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-47 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:32:23,361] ERROR [Controller id=0] Received error UNKNOWN_SERVER_ERROR in LeaderAndIsr response LeaderAndIsrResponseData(errorCode=-1, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=n1SVpGCQQ16Xhq7oRWlW8Q, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=-1)])]) from broker 0 (state.change.logger)
[2022-06-09 12:32:23,361] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 8 (state.change.logger)
[2022-06-09 12:32:57,968] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:33:40,287] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-09 12:33:40,623] INFO [Controller id=0 epoch=1] Changed partition invoice-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,624] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,624] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:33:40,630] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:33:40,679] INFO [Controller id=0 epoch=1] Changed partition invoice-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,679] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,683] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 2 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:33:40,686] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 2 partitions (state.change.logger)
[2022-06-09 12:33:40,688] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:33:40,695] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 2 partitions (state.change.logger)
[2022-06-09 12:33:40,700] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,700] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,700] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,700] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,700] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,700] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,701] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,702] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,702] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,702] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,702] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,702] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,702] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,702] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,702] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,702] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,702] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,702] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,703] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,704] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,704] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,704] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,704] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,704] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,704] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:40,704] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:33:40,708] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:33:40,769] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 1 as part of the become-leader transition for 2 partitions (state.change.logger)
[2022-06-09 12:33:40,851] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,851] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,851] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,851] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,851] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,851] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,851] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,851] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,851] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,852] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,853] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,853] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,853] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,853] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,853] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,853] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,853] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,853] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,853] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,854] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:40,855] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:33:40,856] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-09 12:33:40,860] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:33:40,940] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:40,982] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,007] INFO [Broker id=0] Finished LeaderAndIsr request in 315ms correlationId 1 from controller 0 for 2 partitions (state.change.logger)
[2022-06-09 12:33:41,025] INFO [Broker id=0] Add 2 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 2 (state.change.logger)
[2022-06-09 12:33:41,031] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 12:33:41,093] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 3 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-09 12:33:41,108] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,130] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,158] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,189] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,208] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,238] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,259] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,285] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,313] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,332] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,353] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,377] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,407] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,432] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,453] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,479] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,497] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,519] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,535] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,561] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,583] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,612] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,634] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,657] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,685] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,707] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,732] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,751] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,768] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,792] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,830] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,856] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,876] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,897] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,914] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,936] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,964] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:41,988] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,007] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,030] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,050] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,070] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,094] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,115] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,139] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,157] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,180] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,197] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,217] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,234] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:42,282] INFO [Broker id=0] Finished LeaderAndIsr request in 1251ms correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 12:33:42,285] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 4 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,399] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:33:57,400] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:33:57,402] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:33:57,583] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,584] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,590] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,590] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,591] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,592] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,592] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,592] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,592] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,592] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,592] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,592] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:33:57,592] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:33:57,592] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-09 12:33:57,594] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:33:57,594] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 5 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 12:33:57,685] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 5 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-09 12:33:57,770] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:57,825] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:57,872] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:57,896] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:57,926] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:33:57,953] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-25 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,958] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-6 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,959] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-44 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,959] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-41 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,960] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-3 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,960] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-22 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,960] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-38 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,961] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-0 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,962] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-19 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,962] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-35 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,963] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-16 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,963] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-13 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,963] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-32 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,964] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-48 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,964] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-29 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,964] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-10 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,964] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-7 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,965] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-26 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,965] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-45 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,965] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-23 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,965] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-42 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,966] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-4 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,966] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-39 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,966] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-1 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,967] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-20 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,967] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-36 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,967] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-17 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,967] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-33 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,968] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-14 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,968] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-30 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,968] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-49 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,968] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-11 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,968] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-46 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,969] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-18 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,969] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-27 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,969] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-8 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,970] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-37 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,970] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-5 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,970] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-15 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,970] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-34 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,971] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-43 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,971] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-24 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,971] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-2 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,971] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-40 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,971] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-31 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,972] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-21 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,972] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-12 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,972] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-28 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,972] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-9 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,972] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 5 received from controller 0 epoch 1 for partition __transaction_state-47 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader.$anonfun$recoverLog$6(LogLoader.scala:457)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.java:23)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogLoader.recoverLog(LogLoader.scala:457)
	at kafka.log.LogLoader.$anonfun$load$11(LogLoader.scala:162)
	at kafka.log.LogLoader.load(LogLoader.scala:271)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:33:57,990] ERROR [Controller id=0] Received error UNKNOWN_SERVER_ERROR in LeaderAndIsr response LeaderAndIsrResponseData(errorCode=-1, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=FFnqPt0eTTKBoXJToiZSGQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=-1)])]) from broker 0 (state.change.logger)
[2022-06-09 12:33:57,991] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 6 (state.change.logger)
[2022-06-09 12:34:13,729] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:34:59,703] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-09 12:35:20,394] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,394] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:20,402] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:20,448] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,451] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:35:20,454] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 1 partitions (state.change.logger)
[2022-06-09 12:35:20,455] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:20,463] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 12:35:20,464] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,464] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,464] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,464] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,464] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,464] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,464] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,465] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,466] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,467] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,467] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,467] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,467] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:20,467] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:20,469] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:20,518] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-06-09 12:35:20,619] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,619] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,619] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,619] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,619] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,619] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,619] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,619] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,619] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,620] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,621] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,622] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,622] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,622] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,622] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,622] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,622] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,622] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,622] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:20,622] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:35:20,623] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-09 12:35:20,625] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:20,685] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:20,826] INFO [Broker id=0] Finished LeaderAndIsr request in 367ms correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 12:35:20,842] INFO [Broker id=0] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 2 (state.change.logger)
[2022-06-09 12:35:20,852] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 12:35:20,978] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 3 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-09 12:35:21,105] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,241] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,262] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,286] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,303] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,324] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,347] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,377] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,397] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,420] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,441] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,465] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,489] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,513] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,532] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,562] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,580] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,607] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,624] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,639] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,661] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,684] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,700] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,715] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,737] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,757] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,770] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,794] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,817] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,834] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,849] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,870] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,887] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,905] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,922] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,944] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,972] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:21,985] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,003] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,023] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,049] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,064] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,089] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,102] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,122] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,142] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,160] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,183] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,204] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,223] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:22,256] INFO [Broker id=0] Finished LeaderAndIsr request in 1404ms correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 12:35:22,259] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 4 (state.change.logger)
[2022-06-09 12:35:29,695] INFO [Controller id=0 epoch=1] Changed partition invoice-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:29,695] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:29,695] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:29,714] INFO [Controller id=0 epoch=1] Changed partition invoice-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:29,715] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:35:29,715] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 1 partitions (state.change.logger)
[2022-06-09 12:35:29,716] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:29,716] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 5 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 12:35:29,719] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 5 from controller 0 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-06-09 12:35:29,778] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:29,785] INFO [Broker id=0] Finished LeaderAndIsr request in 69ms correlationId 5 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 12:35:29,788] INFO [Broker id=0] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 6 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,926] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,927] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,928] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,929] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,929] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,929] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,929] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:35:41,929] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:41,935] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,149] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,150] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,151] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,152] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,152] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,152] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,152] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,152] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,152] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,152] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,152] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:35:42,152] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:35:42,153] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-09 12:35:42,155] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:35:42,158] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 7 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 12:35:42,245] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 7 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-09 12:35:42,261] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:35:42,291] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-25 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,298] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-6 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,298] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-44 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,299] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-41 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,300] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-3 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,300] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-22 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,300] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-38 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,301] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-0 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,308] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-19 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,309] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-35 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,309] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-16 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,309] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-13 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,310] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-32 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,310] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-48 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,310] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-29 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,310] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-10 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,311] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-7 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,311] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-26 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,311] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-45 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,311] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-23 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,311] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-42 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,312] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-4 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,312] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-39 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,312] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-1 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,312] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-20 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,312] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-36 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,313] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-17 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,313] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-33 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,313] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-14 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,314] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-30 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,314] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-49 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,314] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-11 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,314] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-46 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,315] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-18 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,315] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-27 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,315] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-8 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,315] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-37 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,315] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-5 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,316] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-15 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,316] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-34 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,316] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-43 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,316] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-24 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,317] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-2 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,317] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-40 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,317] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-31 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,317] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-21 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,317] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-12 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,318] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-28 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,318] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-9 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,318] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 7 received from controller 0 epoch 1 for partition __transaction_state-47 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-09 12:35:42,341] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 8 (state.change.logger)
[2022-06-09 12:35:42,341] ERROR [Controller id=0] Received error UNKNOWN_SERVER_ERROR in LeaderAndIsr response LeaderAndIsrResponseData(errorCode=-1, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=N1ajqamGTt2VF3sJ1dj7dQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=-1)])]) from broker 0 (state.change.logger)
[2022-06-09 12:35:55,679] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:37:40,888] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-09 12:38:41,504] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,505] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:41,515] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:41,573] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,579] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:38:41,583] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 1 partitions (state.change.logger)
[2022-06-09 12:38:41,585] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:41,606] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 12:38:41,609] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,609] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,609] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,610] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,610] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,610] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,610] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,610] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,610] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,611] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,611] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,612] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,612] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,612] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,612] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,612] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,612] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,612] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,613] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,613] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,613] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,613] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,613] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,614] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,614] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,615] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,615] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,615] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,615] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,615] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,615] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,615] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,615] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,615] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,615] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,616] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,616] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,616] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,616] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,616] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,616] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,616] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,616] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,616] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,617] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,617] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,617] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,617] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,617] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,617] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:41,617] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:41,622] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:41,665] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-06-09 12:38:41,904] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,904] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,904] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,905] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,905] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,905] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,905] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,905] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,905] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,905] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,905] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,905] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,905] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,906] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,906] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,906] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,906] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,906] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,906] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,906] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,906] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,906] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,907] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,907] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,907] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,907] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,907] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,907] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,907] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,907] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,907] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,907] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,908] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,908] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,908] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,908] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,908] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,908] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,908] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,909] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,909] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,909] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,909] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,909] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,909] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,909] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,909] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,910] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,910] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,910] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:41,911] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:38:41,912] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-09 12:38:41,916] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:41,948] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,010] INFO [Broker id=0] Finished LeaderAndIsr request in 418ms correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 12:38:42,031] INFO [Broker id=0] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 2 (state.change.logger)
[2022-06-09 12:38:42,039] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 12:38:42,177] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 3 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-09 12:38:42,222] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,262] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,290] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,332] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,356] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,383] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,408] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,430] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,451] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,473] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,495] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,527] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,553] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,576] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,596] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,622] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,643] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,663] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,680] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,699] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,721] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,738] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,755] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,773] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,793] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,815] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,833] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,851] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,870] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,887] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,905] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,921] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,938] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,953] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,972] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:42,989] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,009] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,026] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,048] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,067] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,092] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,113] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,132] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,151] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,176] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,210] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,238] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,265] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,284] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,311] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:43,359] INFO [Broker id=0] Finished LeaderAndIsr request in 1320ms correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 12:38:43,363] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 4 (state.change.logger)
[2022-06-09 12:38:46,505] INFO [Controller id=0 epoch=1] Changed partition invoice-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:46,506] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:46,506] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:46,520] INFO [Controller id=0 epoch=1] Changed partition invoice-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:46,521] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:38:46,521] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 1 partitions (state.change.logger)
[2022-06-09 12:38:46,522] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:46,523] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 5 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 12:38:46,525] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 5 from controller 0 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-06-09 12:38:46,543] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:46,551] INFO [Broker id=0] Finished LeaderAndIsr request in 29ms correlationId 5 from controller 0 for 1 partitions (state.change.logger)
[2022-06-09 12:38:46,554] INFO [Broker id=0] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 6 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,016] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,017] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,018] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,018] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,018] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,018] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,018] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-09 12:38:53,018] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:53,020] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,189] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,190] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,191] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,191] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,191] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,191] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,191] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,191] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,191] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,191] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,191] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,191] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,191] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-09 12:38:53,192] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 12:38:53,192] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-09 12:38:53,195] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 7 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 12:38:53,195] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 12:38:53,293] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 7 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-09 12:38:53,307] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,325] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,342] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,362] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,457] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,479] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,497] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,516] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,532] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,551] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,570] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,589] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,604] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,619] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,633] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,650] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,663] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,676] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,689] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,705] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,720] INFO [Broker id=0] Leader __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,734] INFO [Broker id=0] Leader __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,749] INFO [Broker id=0] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,767] INFO [Broker id=0] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,782] INFO [Broker id=0] Leader __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,797] INFO [Broker id=0] Leader __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,814] INFO [Broker id=0] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,829] INFO [Broker id=0] Leader __transaction_state-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,845] INFO [Broker id=0] Leader __transaction_state-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,861] INFO [Broker id=0] Leader __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,877] INFO [Broker id=0] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,895] INFO [Broker id=0] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,911] INFO [Broker id=0] Leader __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,926] INFO [Broker id=0] Leader __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,944] INFO [Broker id=0] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,961] INFO [Broker id=0] Leader __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,976] INFO [Broker id=0] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:53,994] INFO [Broker id=0] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,009] INFO [Broker id=0] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,029] INFO [Broker id=0] Leader __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,046] INFO [Broker id=0] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,062] INFO [Broker id=0] Leader __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,080] INFO [Broker id=0] Leader __transaction_state-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,097] INFO [Broker id=0] Leader __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,116] INFO [Broker id=0] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,138] INFO [Broker id=0] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,187] INFO [Broker id=0] Leader __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,229] INFO [Broker id=0] Leader __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,258] INFO [Broker id=0] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,294] INFO [Broker id=0] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 12:38:54,349] INFO [Broker id=0] Finished LeaderAndIsr request in 1154ms correlationId 7 from controller 0 for 50 partitions (state.change.logger)
[2022-06-09 12:38:54,353] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 8 (state.change.logger)
[2022-06-09 14:16:39,506] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-09 14:20:18,553] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-09 14:20:18,643] INFO [Controller id=0 epoch=2] Sending LeaderAndIsr request to broker 0 with 102 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-09 14:20:18,648] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set(0) for 102 partitions (state.change.logger)
[2022-06-09 14:20:18,704] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 102 partitions (state.change.logger)
[2022-06-09 14:20:18,875] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 2 as part of the become-leader transition for 102 partitions (state.change.logger)
[2022-06-09 14:20:18,903] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,912] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,919] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,925] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,929] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,934] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,939] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,943] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,949] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,957] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,963] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,969] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,974] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,980] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,985] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,991] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 8 with high watermark 8 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,992] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:18,997] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,004] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,010] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,015] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,020] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,025] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,029] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,034] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,039] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,044] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,049] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,054] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,059] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,063] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,068] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,074] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,078] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 4 with high watermark 4 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,079] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,083] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,089] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,094] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,099] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,106] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,110] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,115] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,120] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,125] INFO [Broker id=0] Leader __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,130] INFO [Broker id=0] Leader __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,137] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,142] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 15 with high watermark 15 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,144] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,149] INFO [Broker id=0] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,156] INFO [Broker id=0] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,160] INFO [Broker id=0] Leader __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,165] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,171] INFO [Broker id=0] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,175] INFO [Broker id=0] Leader __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,179] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,187] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,193] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,197] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,204] INFO [Broker id=0] Leader __transaction_state-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,209] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,213] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,220] INFO [Broker id=0] Leader __transaction_state-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,226] INFO [Broker id=0] Leader __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,232] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,238] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,243] INFO [Broker id=0] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,247] INFO [Broker id=0] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,253] INFO [Broker id=0] Leader __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,257] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,262] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,267] INFO [Broker id=0] Leader __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,272] INFO [Broker id=0] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,276] INFO [Broker id=0] Leader __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,281] INFO [Broker id=0] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,286] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,290] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,295] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,301] INFO [Broker id=0] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,309] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,315] INFO [Broker id=0] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,320] INFO [Broker id=0] Leader __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,325] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,329] INFO [Broker id=0] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,333] INFO [Broker id=0] Leader __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,339] INFO [Broker id=0] Leader __transaction_state-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,344] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,349] INFO [Broker id=0] Leader __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,354] INFO [Broker id=0] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,359] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,363] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,367] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,371] INFO [Broker id=0] Leader __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,376] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,380] INFO [Broker id=0] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,383] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,388] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,394] INFO [Broker id=0] Leader __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,400] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,404] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,409] INFO [Broker id=0] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,412] INFO [Broker id=0] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,417] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-09 14:20:19,503] INFO [Broker id=0] Finished LeaderAndIsr request in 802ms correlationId 1 from controller 0 for 102 partitions (state.change.logger)
[2022-06-09 14:20:19,523] INFO [Broker id=0] Add 102 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 2 with correlation id 2 (state.change.logger)
[2022-06-09 21:42:25,113] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-10 15:34:14,523] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-10 15:34:14,582] INFO [Controller id=0 epoch=3] Sending LeaderAndIsr request to broker 0 with 102 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-10 15:34:14,585] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set(0) for 102 partitions (state.change.logger)
[2022-06-10 15:34:14,622] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 102 partitions (state.change.logger)
[2022-06-10 15:34:14,739] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 3 as part of the become-leader transition for 102 partitions (state.change.logger)
[2022-06-10 15:34:14,759] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,766] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,771] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,777] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,784] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,789] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,793] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,797] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,802] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,807] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,811] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,818] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,825] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,830] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,833] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,837] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 12 with high watermark 12 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,838] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,844] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,849] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,853] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,857] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,864] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,869] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,874] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,879] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,883] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,892] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,898] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,905] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,910] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,914] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,918] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,923] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,929] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 6 with high watermark 6 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,929] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,933] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,941] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,947] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,954] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,962] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,970] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,974] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,978] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,982] INFO [Broker id=0] Leader __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,989] INFO [Broker id=0] Leader __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,994] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,998] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 28 with high watermark 28 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:14,999] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,003] INFO [Broker id=0] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,008] INFO [Broker id=0] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,012] INFO [Broker id=0] Leader __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,016] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,021] INFO [Broker id=0] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,029] INFO [Broker id=0] Leader __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,033] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,037] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,042] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,046] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,052] INFO [Broker id=0] Leader __transaction_state-33 starts at leader epoch 0 from offset 4 with high watermark 4 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,053] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 2 with high watermark 2 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,053] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,062] INFO [Broker id=0] Leader __transaction_state-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,066] INFO [Broker id=0] Leader __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,070] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,075] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,079] INFO [Broker id=0] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,083] INFO [Broker id=0] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,087] INFO [Broker id=0] Leader __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,098] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,102] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,105] INFO [Broker id=0] Leader __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,110] INFO [Broker id=0] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,115] INFO [Broker id=0] Leader __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,119] INFO [Broker id=0] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,124] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,132] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,136] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,140] INFO [Broker id=0] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,145] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,149] INFO [Broker id=0] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,153] INFO [Broker id=0] Leader __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,158] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,162] INFO [Broker id=0] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,171] INFO [Broker id=0] Leader __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,175] INFO [Broker id=0] Leader __transaction_state-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,180] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,185] INFO [Broker id=0] Leader __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,190] INFO [Broker id=0] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,195] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,203] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,208] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,213] INFO [Broker id=0] Leader __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,217] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,222] INFO [Broker id=0] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,227] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,231] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,235] INFO [Broker id=0] Leader __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,245] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,249] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,252] INFO [Broker id=0] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,258] INFO [Broker id=0] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,262] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 15:34:15,348] INFO [Broker id=0] Finished LeaderAndIsr request in 728ms correlationId 1 from controller 0 for 102 partitions (state.change.logger)
[2022-06-10 15:34:15,368] INFO [Broker id=0] Add 102 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 3 with correlation id 2 (state.change.logger)
[2022-06-10 22:53:14,059] INFO [Controller id=0 epoch=3] Changed partition cdwxm0wl-default-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-10 22:53:14,061] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-10 22:53:14,070] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-10 22:53:14,118] INFO [Controller id=0 epoch=3] Changed partition cdwxm0wl-default-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-10 22:53:14,118] INFO [Controller id=0 epoch=3] Sending LeaderAndIsr request to broker 0 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-10 22:53:14,124] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set(0) for 1 partitions (state.change.logger)
[2022-06-10 22:53:14,126] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-10 22:53:14,186] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 3 from controller 0 for 1 partitions (state.change.logger)
[2022-06-10 22:53:14,199] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 3 from controller 0 epoch 3 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-06-10 22:53:14,311] INFO [Broker id=0] Leader cdwxm0wl-default-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-10 22:53:14,326] INFO [Broker id=0] Finished LeaderAndIsr request in 143ms correlationId 3 from controller 0 for 1 partitions (state.change.logger)
[2022-06-10 22:53:14,335] INFO [Broker id=0] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 3 with correlation id 4 (state.change.logger)
[2022-06-11 03:03:08,000] INFO [Controller id=0 epoch=4] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-11 03:03:08,071] INFO [Controller id=0 epoch=4] Sending LeaderAndIsr request to broker 0 with 103 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-11 03:03:08,075] INFO [Controller id=0 epoch=4] Sending UpdateMetadata request to brokers Set(0) for 103 partitions (state.change.logger)
[2022-06-11 03:03:08,113] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-11 03:03:08,231] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 4 as part of the become-leader transition for 103 partitions (state.change.logger)
[2022-06-11 03:03:08,263] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,272] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,278] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,283] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,293] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,298] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,302] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,306] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,311] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,315] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,324] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,328] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,333] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,337] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,343] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,349] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 16 with high watermark 16 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,349] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,357] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,361] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,365] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,370] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,374] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,378] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,387] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,391] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,395] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,400] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,404] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,408] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,416] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,419] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,423] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,427] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,431] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 6 with high watermark 6 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,432] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,436] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,439] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,446] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,453] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,456] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,460] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,464] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,468] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,471] INFO [Broker id=0] Leader __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,482] INFO [Broker id=0] Leader __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,485] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,489] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 33 with high watermark 33 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,490] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 5 with high watermark 5 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,490] INFO [Broker id=0] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,495] INFO [Broker id=0] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,499] INFO [Broker id=0] Leader __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,505] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,511] INFO [Broker id=0] Leader cdwxm0wl-default-0 starts at leader epoch 0 from offset 2 with high watermark 2 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,511] INFO [Broker id=0] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,515] INFO [Broker id=0] Leader __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,518] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,522] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,529] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,537] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,542] INFO [Broker id=0] Leader __transaction_state-33 starts at leader epoch 0 from offset 4 with high watermark 4 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,542] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 2 with high watermark 2 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,543] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,547] INFO [Broker id=0] Leader __transaction_state-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,553] INFO [Broker id=0] Leader __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,561] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,564] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,568] INFO [Broker id=0] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,572] INFO [Broker id=0] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,576] INFO [Broker id=0] Leader __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,580] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,591] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,595] INFO [Broker id=0] Leader __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,599] INFO [Broker id=0] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,603] INFO [Broker id=0] Leader __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,607] INFO [Broker id=0] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,613] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,621] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,626] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,631] INFO [Broker id=0] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,635] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,640] INFO [Broker id=0] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,647] INFO [Broker id=0] Leader __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,655] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,660] INFO [Broker id=0] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,664] INFO [Broker id=0] Leader __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,669] INFO [Broker id=0] Leader __transaction_state-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,674] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,684] INFO [Broker id=0] Leader __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,690] INFO [Broker id=0] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,695] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,700] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,704] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,709] INFO [Broker id=0] Leader __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,715] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,722] INFO [Broker id=0] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,729] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,736] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,742] INFO [Broker id=0] Leader __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,748] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,752] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,760] INFO [Broker id=0] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,767] INFO [Broker id=0] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,771] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-11 03:03:08,869] INFO [Broker id=0] Finished LeaderAndIsr request in 757ms correlationId 1 from controller 0 for 103 partitions (state.change.logger)
[2022-06-11 03:03:08,890] INFO [Broker id=0] Add 103 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 4 with correlation id 2 (state.change.logger)
[2022-06-11 03:21:41,260] INFO [Controller id=0 epoch=4] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:30:53,492] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-19 20:31:35,693] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,694] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:31:35,701] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:31:35,737] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,739] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-19 20:31:35,741] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 1 partitions (state.change.logger)
[2022-06-19 20:31:35,742] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:31:35,748] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-19 20:31:35,752] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,752] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,752] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,752] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,752] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,752] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,753] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,754] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,755] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,755] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,755] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:31:35,755] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:31:35,757] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:31:35,792] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,883] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,884] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,885] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:31:35,886] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-19 20:31:35,886] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-19 20:31:35,889] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:31:35,992] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,032] INFO [Broker id=0] Finished LeaderAndIsr request in 288ms correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-19 20:31:36,046] INFO [Broker id=0] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 2 (state.change.logger)
[2022-06-19 20:31:36,050] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-19 20:31:36,154] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 3 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-19 20:31:36,172] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,194] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,212] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,229] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,258] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,296] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,458] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,523] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,552] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,578] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,645] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:31:36,671] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-0 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,678] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-29 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,678] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-48 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,679] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-10 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,679] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-45 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,679] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-26 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,680] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-7 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,680] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-42 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,681] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-4 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,681] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-23 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,681] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-1 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,682] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-20 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,682] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-39 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,682] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-17 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,683] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-36 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,683] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-14 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,683] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-33 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,683] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-49 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,684] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-11 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,684] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-30 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,684] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-46 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,685] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-27 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,685] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-8 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,685] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-24 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,686] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-43 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,686] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-5 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,686] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-21 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,687] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-40 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,687] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-2 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,687] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-37 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,688] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-18 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,688] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-34 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,688] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-15 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,688] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-12 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,689] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-31 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,689] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-9 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,689] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-47 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,689] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-19 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-28 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-38 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-35 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-6 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,690] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-44 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,691] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-25 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,691] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-16 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,691] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-22 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,691] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-41 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,691] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-32 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,692] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-3 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,692] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-13 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:31:36,708] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 4 (state.change.logger)
[2022-06-19 20:31:36,709] ERROR [Controller id=0] Received error UNKNOWN_SERVER_ERROR in LeaderAndIsr response LeaderAndIsrResponseData(errorCode=-1, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=sGMIehyfQ7mdhuqbYiEuGg, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1)])]) from broker 0 (state.change.logger)
[2022-06-19 20:32:14,621] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:33:22,727] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-19 20:33:26,952] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:26,954] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:33:26,961] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:33:27,013] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,019] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-19 20:33:27,026] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 1 partitions (state.change.logger)
[2022-06-19 20:33:27,028] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:33:27,034] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-19 20:33:27,041] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,041] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,041] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,041] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,041] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,041] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,041] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,041] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,042] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,043] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,043] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,043] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,043] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,043] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,043] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,043] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,043] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,043] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,044] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,044] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,044] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,044] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,044] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,044] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,044] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,044] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,044] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,044] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,044] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,045] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,045] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,045] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,045] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,045] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,045] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,045] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,045] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,045] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,045] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:33:27,045] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:33:27,048] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:33:27,113] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-06-19 20:33:27,204] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,205] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,206] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,207] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,207] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,207] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,207] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,207] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,207] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,207] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,207] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,207] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,207] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:33:27,208] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-19 20:33:27,209] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-19 20:33:27,212] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:33:27,435] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,474] INFO [Broker id=0] Finished LeaderAndIsr request in 443ms correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-19 20:33:27,491] INFO [Broker id=0] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 2 (state.change.logger)
[2022-06-19 20:33:27,494] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-19 20:33:27,566] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 3 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-19 20:33:27,590] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,611] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,637] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,665] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,694] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,721] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,753] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,783] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,814] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,843] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,874] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:33:27,906] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-0 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,910] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-29 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,911] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-48 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,911] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-10 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,912] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-45 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,912] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-26 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,912] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-7 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,912] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-42 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,912] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-4 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,913] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-23 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,913] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-1 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,913] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-20 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,913] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-39 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,914] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-17 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,914] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-36 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,914] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-14 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,914] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-33 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,915] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-49 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,915] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-11 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,915] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-30 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,915] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-46 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,915] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-27 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,916] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-8 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,916] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-24 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,917] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-43 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,917] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-5 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,917] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-21 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,918] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-40 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,918] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-2 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,918] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-37 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,918] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-18 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,918] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-34 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,919] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-15 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,919] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-12 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,919] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-31 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,920] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-9 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,920] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-47 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,920] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-19 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,920] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-28 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,920] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-38 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,920] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-35 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,921] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-6 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,921] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-44 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,921] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-25 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,921] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-16 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,921] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-22 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,921] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-41 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,921] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-32 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,921] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-3 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,922] ERROR [Broker id=0] Error while processing LeaderAndIsr request correlationId 3 received from controller 0 epoch 1 for partition __consumer_offsets-13 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.base/java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.TimeIndex.<init>(TimeIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forTime$1(LazyIndex.scala:109)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.timeIndex(LogSegment.scala:66)
	at kafka.log.LogSegment.resizeIndexes(LogSegment.scala:77)
	at kafka.log.LogLoader.load(LogLoader.scala:165)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1810)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:895)
	at scala.Option.getOrElse(Option.scala:189)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:846)
	at kafka.cluster.Partition.createLog(Partition.scala:372)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:347)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:354)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:566)
	at kafka.cluster.Partition.makeLeader(Partition.scala:543)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1592)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.compat.MapExtensionMethods$.$anonfun$foreachEntry$1(PackageShared.scala:521)
	at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
	at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
	at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
	at scala.collection.compat.MapExtensionMethods$.foreachEntry$extension(PackageShared.scala:521)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1590)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:269)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:176)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.base/java.lang.Thread.run(Thread.java:831)
[2022-06-19 20:33:27,932] ERROR [Controller id=0] Received error UNKNOWN_SERVER_ERROR in LeaderAndIsr response LeaderAndIsrResponseData(errorCode=-1, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=IqFrdurxRoGdPnoSdqNmvw, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1)])]) from broker 0 (state.change.logger)
[2022-06-19 20:33:27,933] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 4 (state.change.logger)
[2022-06-19 20:33:44,283] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:42:34,633] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-19 20:42:47,342] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,343] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:42:47,352] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:42:47,409] INFO [Controller id=0 epoch=1] Changed partition reservation-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,413] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-19 20:42:47,416] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 1 partitions (state.change.logger)
[2022-06-19 20:42:47,418] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:42:47,427] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-19 20:42:47,432] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,433] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,433] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,433] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,433] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,433] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,433] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,433] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,433] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,434] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,434] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,434] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,434] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,434] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,434] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,434] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,434] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,435] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,436] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,436] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,436] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,436] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,436] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,436] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,437] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,437] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,438] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,438] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,438] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,438] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,438] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,438] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,439] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,439] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,439] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,439] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,439] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,454] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,454] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,454] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,454] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,454] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,454] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,454] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,455] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,455] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,455] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,455] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,455] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,455] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:42:47,455] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:42:47,458] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:42:47,489] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-06-19 20:42:47,584] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,584] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,584] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,584] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,584] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,584] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,584] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,584] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,584] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,585] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,586] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,587] INFO [Controller id=0 epoch=1] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:42:47,588] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-19 20:42:47,588] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-19 20:42:47,591] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:42:47,639] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:47,674] INFO [Broker id=0] Finished LeaderAndIsr request in 252ms correlationId 1 from controller 0 for 1 partitions (state.change.logger)
[2022-06-19 20:42:47,683] INFO [Broker id=0] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 2 (state.change.logger)
[2022-06-19 20:42:47,687] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-19 20:42:47,833] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 3 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-19 20:42:47,855] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:47,893] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:47,914] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:47,934] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:47,961] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:47,983] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,007] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,032] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,058] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,079] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,099] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,120] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,140] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,163] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,180] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,196] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,213] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,230] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,245] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,262] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,280] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,295] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,312] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,331] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,347] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,362] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,377] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,394] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,410] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,424] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,439] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,455] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,466] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,479] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,497] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,509] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,525] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,539] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,555] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,571] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,587] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,605] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,621] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,635] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,650] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,664] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,678] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,693] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,708] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,722] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:42:48,753] INFO [Broker id=0] Finished LeaderAndIsr request in 1066ms correlationId 3 from controller 0 for 50 partitions (state.change.logger)
[2022-06-19 20:42:48,756] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 4 (state.change.logger)
[2022-06-19 20:43:42,005] INFO [Controller id=0 epoch=1] Changed partition invoice-event-topic-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:43:42,005] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:43:42,006] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:43:42,022] INFO [Controller id=0 epoch=1] Changed partition invoice-event-topic-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:43:42,023] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-19 20:43:42,023] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 1 partitions (state.change.logger)
[2022-06-19 20:43:42,024] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:43:42,025] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 5 from controller 0 for 1 partitions (state.change.logger)
[2022-06-19 20:43:42,027] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 5 from controller 0 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-06-19 20:43:42,051] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:43:42,058] INFO [Broker id=0] Finished LeaderAndIsr request in 33ms correlationId 5 from controller 0 for 1 partitions (state.change.logger)
[2022-06-19 20:43:42,060] INFO [Broker id=0] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 6 (state.change.logger)
[2022-06-19 20:46:24,460] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-42 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,461] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-31 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,462] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-45 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,462] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-15 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,462] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-12 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,462] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-7 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,462] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-46 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,462] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-48 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,462] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-49 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,462] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-28 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,462] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-2 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,462] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-20 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,462] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-24 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-13 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-0 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-37 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-3 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-21 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-29 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-39 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-38 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-6 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-14 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-10 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-44 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-9 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-22 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-43 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-4 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-30 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,463] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-33 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-32 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-25 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-17 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-23 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-47 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-18 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-26 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-36 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-5 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-8 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-16 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-11 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-40 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-19 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-27 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-41 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-1 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-34 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,464] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-35 state from NonExistentPartition to NewPartition with assigned replicas 0 (state.change.logger)
[2022-06-19 20:46:24,465] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:46:24,468] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,587] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,588] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Changed partition __transaction_state-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=0, leaderEpoch=0, isr=List(0), leaderRecoveryState=RECOVERED, zkVersion=0) (state.change.logger)
[2022-06-19 20:46:24,589] INFO [Controller id=0 epoch=1] Sending LeaderAndIsr request to broker 0 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-19 20:46:24,590] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set(0) for 50 partitions (state.change.logger)
[2022-06-19 20:46:24,591] INFO [Controller id=0 epoch=1] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-19 20:46:24,593] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 7 from controller 0 for 50 partitions (state.change.logger)
[2022-06-19 20:46:24,651] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 7 from controller 0 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-06-19 20:46:24,669] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,682] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,695] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,710] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,727] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,743] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,760] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,773] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,796] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,815] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,835] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,862] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,880] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,899] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,924] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,945] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,958] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,973] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:24,989] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,004] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,023] INFO [Broker id=0] Leader __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,043] INFO [Broker id=0] Leader __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,057] INFO [Broker id=0] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,073] INFO [Broker id=0] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,095] INFO [Broker id=0] Leader __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,111] INFO [Broker id=0] Leader __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,126] INFO [Broker id=0] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,140] INFO [Broker id=0] Leader __transaction_state-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,155] INFO [Broker id=0] Leader __transaction_state-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,171] INFO [Broker id=0] Leader __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,185] INFO [Broker id=0] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,201] INFO [Broker id=0] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,214] INFO [Broker id=0] Leader __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,229] INFO [Broker id=0] Leader __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,244] INFO [Broker id=0] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,259] INFO [Broker id=0] Leader __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,276] INFO [Broker id=0] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,290] INFO [Broker id=0] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,307] INFO [Broker id=0] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,325] INFO [Broker id=0] Leader __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,343] INFO [Broker id=0] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,363] INFO [Broker id=0] Leader __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,379] INFO [Broker id=0] Leader __transaction_state-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,397] INFO [Broker id=0] Leader __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,418] INFO [Broker id=0] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,432] INFO [Broker id=0] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,448] INFO [Broker id=0] Leader __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,466] INFO [Broker id=0] Leader __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,480] INFO [Broker id=0] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,496] INFO [Broker id=0] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-19 20:46:25,547] INFO [Broker id=0] Finished LeaderAndIsr request in 954ms correlationId 7 from controller 0 for 50 partitions (state.change.logger)
[2022-06-19 20:46:25,550] INFO [Broker id=0] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 1 with correlation id 8 (state.change.logger)
[2022-06-20 02:07:17,999] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-20 02:07:18,070] INFO [Controller id=0 epoch=2] Sending LeaderAndIsr request to broker 0 with 102 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-20 02:07:18,074] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set(0) for 102 partitions (state.change.logger)
[2022-06-20 02:07:18,123] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 102 partitions (state.change.logger)
[2022-06-20 02:07:18,233] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 2 as part of the become-leader transition for 102 partitions (state.change.logger)
[2022-06-20 02:07:18,252] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,261] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,266] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,274] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,282] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,287] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,292] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,298] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,303] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,308] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,314] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,319] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,324] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,329] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,335] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,340] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 7 with high watermark 7 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,340] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,345] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,350] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,355] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,359] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,365] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,370] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,375] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,379] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,404] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,409] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,415] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,421] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,425] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,433] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,438] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,442] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,451] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 4 with high watermark 4 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,451] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,458] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,466] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,472] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,478] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,483] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,488] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,492] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,498] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,503] INFO [Broker id=0] Leader __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,507] INFO [Broker id=0] Leader __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,512] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,518] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 7 with high watermark 7 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,518] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,523] INFO [Broker id=0] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,527] INFO [Broker id=0] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,532] INFO [Broker id=0] Leader __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,537] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,542] INFO [Broker id=0] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,548] INFO [Broker id=0] Leader __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,554] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,559] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,569] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,577] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,586] INFO [Broker id=0] Leader __transaction_state-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,592] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,600] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,605] INFO [Broker id=0] Leader __transaction_state-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,611] INFO [Broker id=0] Leader __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,618] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,623] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,628] INFO [Broker id=0] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,635] INFO [Broker id=0] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,641] INFO [Broker id=0] Leader __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,654] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,666] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,674] INFO [Broker id=0] Leader __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,684] INFO [Broker id=0] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,689] INFO [Broker id=0] Leader __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,701] INFO [Broker id=0] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,707] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,713] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,720] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,727] INFO [Broker id=0] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,735] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,741] INFO [Broker id=0] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,747] INFO [Broker id=0] Leader __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,753] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,759] INFO [Broker id=0] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,766] INFO [Broker id=0] Leader __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,771] INFO [Broker id=0] Leader __transaction_state-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,778] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,786] INFO [Broker id=0] Leader __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,793] INFO [Broker id=0] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,799] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,807] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,814] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,821] INFO [Broker id=0] Leader __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,832] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,838] INFO [Broker id=0] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,844] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,849] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,856] INFO [Broker id=0] Leader __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,860] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,869] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,873] INFO [Broker id=0] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,879] INFO [Broker id=0] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:18,885] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 02:07:19,013] INFO [Broker id=0] Finished LeaderAndIsr request in 892ms correlationId 1 from controller 0 for 102 partitions (state.change.logger)
[2022-06-20 02:07:19,035] INFO [Broker id=0] Add 102 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 2 with correlation id 2 (state.change.logger)
[2022-06-20 03:05:58,372] INFO [Controller id=0 epoch=2] Sending UpdateMetadata request to brokers Set() for 0 partitions (state.change.logger)
[2022-06-20 18:22:26,602] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set(0) for 0 partitions (state.change.logger)
[2022-06-20 18:22:26,660] INFO [Controller id=0 epoch=3] Sending LeaderAndIsr request to broker 0 with 102 become-leader and 0 become-follower partitions (state.change.logger)
[2022-06-20 18:22:26,663] INFO [Controller id=0 epoch=3] Sending UpdateMetadata request to brokers Set(0) for 102 partitions (state.change.logger)
[2022-06-20 18:22:26,692] INFO [Broker id=0] Handling LeaderAndIsr request correlationId 1 from controller 0 for 102 partitions (state.change.logger)
[2022-06-20 18:22:26,824] INFO [Broker id=0] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 0 epoch 3 as part of the become-leader transition for 102 partitions (state.change.logger)
[2022-06-20 18:22:26,841] INFO [Broker id=0] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,851] INFO [Broker id=0] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,855] INFO [Broker id=0] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,859] INFO [Broker id=0] Leader __transaction_state-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,863] INFO [Broker id=0] Leader __transaction_state-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,867] INFO [Broker id=0] Leader __transaction_state-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,871] INFO [Broker id=0] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,880] INFO [Broker id=0] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,885] INFO [Broker id=0] Leader __transaction_state-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,889] INFO [Broker id=0] Leader __transaction_state-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,893] INFO [Broker id=0] Leader __transaction_state-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,897] INFO [Broker id=0] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,902] INFO [Broker id=0] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,906] INFO [Broker id=0] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,911] INFO [Broker id=0] Leader __transaction_state-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,916] INFO [Broker id=0] Leader __transaction_state-38 starts at leader epoch 0 from offset 7 with high watermark 7 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,917] INFO [Broker id=0] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,922] INFO [Broker id=0] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,927] INFO [Broker id=0] Leader __transaction_state-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,931] INFO [Broker id=0] Leader __transaction_state-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,935] INFO [Broker id=0] Leader __transaction_state-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,940] INFO [Broker id=0] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,944] INFO [Broker id=0] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,948] INFO [Broker id=0] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,952] INFO [Broker id=0] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,958] INFO [Broker id=0] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,966] INFO [Broker id=0] Leader __transaction_state-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,970] INFO [Broker id=0] Leader __transaction_state-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,974] INFO [Broker id=0] Leader __transaction_state-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,978] INFO [Broker id=0] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,982] INFO [Broker id=0] Leader __transaction_state-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,986] INFO [Broker id=0] Leader __transaction_state-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,990] INFO [Broker id=0] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,994] INFO [Broker id=0] Leader reservation-event-topic-0 starts at leader epoch 0 from offset 4 with high watermark 4 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:26,995] INFO [Broker id=0] Leader __transaction_state-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,001] INFO [Broker id=0] Leader __transaction_state-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,007] INFO [Broker id=0] Leader __transaction_state-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,011] INFO [Broker id=0] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,016] INFO [Broker id=0] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,020] INFO [Broker id=0] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,024] INFO [Broker id=0] Leader __transaction_state-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,027] INFO [Broker id=0] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,032] INFO [Broker id=0] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,036] INFO [Broker id=0] Leader __transaction_state-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,041] INFO [Broker id=0] Leader __transaction_state-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,050] INFO [Broker id=0] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,054] INFO [Broker id=0] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 10 with high watermark 10 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,054] INFO [Broker id=0] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,058] INFO [Broker id=0] Leader __transaction_state-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,062] INFO [Broker id=0] Leader __transaction_state-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,067] INFO [Broker id=0] Leader __transaction_state-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,071] INFO [Broker id=0] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,075] INFO [Broker id=0] Leader __transaction_state-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,079] INFO [Broker id=0] Leader __transaction_state-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,091] INFO [Broker id=0] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,099] INFO [Broker id=0] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,104] INFO [Broker id=0] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,108] INFO [Broker id=0] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,113] INFO [Broker id=0] Leader __transaction_state-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,119] INFO [Broker id=0] Leader invoice-event-topic-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,123] INFO [Broker id=0] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,127] INFO [Broker id=0] Leader __transaction_state-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,133] INFO [Broker id=0] Leader __transaction_state-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,137] INFO [Broker id=0] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,141] INFO [Broker id=0] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,152] INFO [Broker id=0] Leader __transaction_state-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,157] INFO [Broker id=0] Leader __transaction_state-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,172] INFO [Broker id=0] Leader __transaction_state-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,176] INFO [Broker id=0] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,180] INFO [Broker id=0] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,185] INFO [Broker id=0] Leader __transaction_state-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,189] INFO [Broker id=0] Leader __transaction_state-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,193] INFO [Broker id=0] Leader __transaction_state-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,204] INFO [Broker id=0] Leader __transaction_state-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,211] INFO [Broker id=0] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,215] INFO [Broker id=0] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,220] INFO [Broker id=0] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,224] INFO [Broker id=0] Leader __transaction_state-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,227] INFO [Broker id=0] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,232] INFO [Broker id=0] Leader __transaction_state-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,238] INFO [Broker id=0] Leader __transaction_state-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,245] INFO [Broker id=0] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,250] INFO [Broker id=0] Leader __transaction_state-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,254] INFO [Broker id=0] Leader __transaction_state-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,257] INFO [Broker id=0] Leader __transaction_state-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,261] INFO [Broker id=0] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,266] INFO [Broker id=0] Leader __transaction_state-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,270] INFO [Broker id=0] Leader __transaction_state-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,273] INFO [Broker id=0] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,277] INFO [Broker id=0] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,282] INFO [Broker id=0] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,287] INFO [Broker id=0] Leader __transaction_state-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,293] INFO [Broker id=0] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,302] INFO [Broker id=0] Leader __transaction_state-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,306] INFO [Broker id=0] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,310] INFO [Broker id=0] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,314] INFO [Broker id=0] Leader __transaction_state-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,320] INFO [Broker id=0] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,327] INFO [Broker id=0] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,332] INFO [Broker id=0] Leader __transaction_state-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,337] INFO [Broker id=0] Leader __transaction_state-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,347] INFO [Broker id=0] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [0] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-06-20 18:22:27,428] INFO [Broker id=0] Finished LeaderAndIsr request in 737ms correlationId 1 from controller 0 for 102 partitions (state.change.logger)
[2022-06-20 18:22:27,445] INFO [Broker id=0] Add 102 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 0 epoch 3 with correlation id 2 (state.change.logger)
